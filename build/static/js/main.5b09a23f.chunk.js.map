{"version":3,"sources":["components/Search.js","components/Nav.js","components/Photo.js","components/NotFound.js","components/Container.js","config.js","components/App.js","serviceWorker.js","index.js"],"names":["Search","state","searchText","updateState","event","setState","target","value","searchAPI","props","updateLoading","preventDefault","currentTarget","reset","path","history","push","performSearch","className","onSubmit","this","type","name","placeholder","ref","input","topic","required","onChange","fill","height","viewBox","width","xmlns","d","Component","withRouter","Nav","to","Photo","photo","src","alt","id","NotFound","prop","Container","images","loading","length","map","image","index","key","apiKey","photoArray","axios","require","default","App","beachURLs","parkURLs","cityURLs","searchImages","getGifImages","arrayNo","get","then","res","data","photos","gallery","createImageURLs","catch","error","console","log","farm","server","secret","query","exact","render","component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.5b09a23f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport '../index.css';\nimport { withRouter } from 'react-router';\n\nclass Search extends Component {\n  state = {\n    searchText: '',\n  };\n\n  updateState = (event) => {\n    this.setState({\n      searchText: event.target.value,\n    });\n  };\n\n  searchAPI = (event) => {\n    this.props.updateLoading();\n    event.preventDefault();\n    event.currentTarget.reset();\n    let path = '';\n    this.props.history.push(path);\n    path = `search/${this.state.searchText}`;\n\n    this.props.performSearch(this.state.searchText);\n    this.props.history.push(path);\n  };\n\n  render() {\n    return (\n      <form className=\"search-form\" onSubmit={this.searchAPI}>\n        <input\n          type=\"text\"\n          name=\"search\"\n          placeholder=\"Search\"\n          ref={(input) => (this.topic = input)}\n          required\n          value={this.state.value}\n          onChange={this.updateState}\n        />\n\n        <button type=\"submit\" className=\"search-button\">\n          <svg\n            fill=\"#fff\"\n            height=\"44\"\n            viewBox=\"0 0 23 23\"\n            width=\"24\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <path d=\"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z\" />\n            <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n          </svg>\n        </button>\n      </form>\n    );\n  }\n}\n\nexport default withRouter(Search);\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport '../index.css';\nconst Nav = () => {\n  return (\n    <nav className=\"main-nav\">\n      <ul>\n        <li>\n          <NavLink to=\"/beach\">Beach</NavLink>\n        </li>\n        <li>\n          <NavLink to=\"/park\">Park</NavLink>\n        </li>\n        <li>\n          <NavLink to=\"/city\">City</NavLink>\n        </li>\n      </ul>\n    </nav>\n  );\n};\n\nexport default Nav;\n","import React from 'react';\nimport '../index.css';\n\nconst Photo = (props) => {\n  const { photo } = props;\n  return (\n    <li>\n      <img src={photo} alt={photo.id} />\n    </li>\n  );\n};\n\nexport default Photo;\n","import React from 'react';\nimport '../index.css';\n\nconst NotFound = (prop) => <h1>Sorry we cant find anything this time </h1>;\n\nexport default NotFound;\n","import React from 'react';\nimport '../index.css';\nimport Photo from './Photo';\nimport NotFound from './NotFound';\n\nconst Container = (props) => {\n  const { images } = props;\n  const { loading } = props;\n\n  let photo;\n  if (images.length > 0) {\n    photo = images.map((image, index) => <Photo photo={image} key={index} />);\n  }\n  if (images.length === 0 && !loading) {\n    photo = <NotFound />;\n  }\n\n  if (images.length === 0 && loading) {\n    photo = <h1>Loading</h1>;\n  }\n\n  return (\n    <div className=\"photo-container\">\n      <ul>{photo}</ul>\n    </div>\n  );\n};\n\nexport default Container;\n","const apiKey = '1fdb4b04f796cf2df19484cef0925651';\nexport default apiKey;\n","import React, { Component } from 'react';\nimport '../index.css';\nimport Search from './Search';\nimport Nav from './Nav';\nimport Container from './Container';\nimport { BrowserRouter, Route, Switch, Redirect } from 'react-router-dom';\nimport apiKey from '../config.js';\nimport NotFound from './NotFound';\n\n// This is an array of objects of flickr URLs which can be iterated over //\n\nconst photoArray = [\n  `https://www.flickr.com/services/rest/?method=flickr.photos.search&api_key=${apiKey}&tags=beach&per_page=24&page=1&format=json&nojsoncallback=1`,\n  `https://www.flickr.com/services/rest/?method=flickr.photos.search&api_key=${apiKey}&tags=park&per_page=24&page=1&format=json&nojsoncallback=1`,\n  `https://www.flickr.com/services/rest/?method=flickr.photos.search&api_key=${apiKey}&tags=city&per_page=24&page=1&format=json&nojsoncallback=1`,\n];\n\n// I have created this so I can pass down a list of ids for unique keys. I cant use the one in state because it has be formatted into one URL. //\n\n// importing axios to fetch the API //\n\nconst axios = require('axios').default;\n\n/* API key for flickr \n1fdb4b04f796cf2df19484cef0925651\n*/\n\nexport default class App extends Component {\n  state = {\n    beachURLs: [],\n    parkURLs: [],\n    cityURLs: [],\n    searchImages: [],\n    loading: true,\n  };\n\n  // I am using axios so there is no need to convert the data to json, I am using using component did mount so i will only request\n  // API data once the component has loaded //\n\n  componentDidMount() {\n    this.getGifImages(0, 'beachURLs');\n    this.getGifImages(1, 'parkURLs');\n    this.getGifImages(2, 'cityURLs');\n  }\n\n  // This method get the images via axios, uses another function\n  // createImageURLs which then formats the data into a usable\n  // URL address and it is put in a new array which is used ot update state //\n\n  getGifImages = (arrayNo, key) => {\n    this.updateLoading();\n    axios\n      .get(photoArray[arrayNo])\n      .then((res) => res.data.photos.photo)\n      .then((images) => {\n        let gallery = this.createImageURLs(images);\n        this.setState({\n          [key]: gallery,\n        });\n      })\n      .catch((error) => console.log('Error fetching and parsing data', error));\n  };\n\n  createImageURLs = (photos) => {\n    let newArray = photos.map(\n      (photo) =>\n        `https://farm${photo.farm}.staticflickr.com/${photo.server}/${photo.id}_${photo.secret}.jpg`\n      // images.push(URL);\n    );\n    return newArray;\n  };\n\n  // Update loading state beofre searching\n\n  updateLoading = () => {\n    this.setState({\n      loading: true,\n    });\n  };\n\n  //Perform search //\n\n  performSearch = (query) => {\n    this.setState({});\n    axios\n      .get(\n        `https://www.flickr.com/services/rest/?method=flickr.photos.search&api_key=1fdb4b04f796cf2df19484cef0925651&tags=${query}&per_page=24&page=1&format=json&nojsoncallback=1`\n      )\n      .then((res) => res.data.photos.photo)\n      .then((images) => {\n        let gallery = this.createImageURLs(images);\n        this.setState({\n          searchImages: gallery,\n          loading: false,\n        });\n      })\n      .catch((error) => console.log('Error fetching and parsing data', error));\n  };\n\n  render() {\n    return (\n      <BrowserRouter>\n        <Search\n          performSearch={this.performSearch}\n          updateLoading={this.updateLoading}\n          loading={this.state.loading}\n        />\n        <Nav />\n        <div>\n          <Switch>\n            <Route exact path=\"/\" render={() => <Redirect to=\"/beach\" />} />\n            <Route\n              path=\"/beach\"\n              render={() => (\n                <Container\n                  images={this.state.beachURLs}\n                  loading={this.state.loading}\n                />\n              )}\n            />\n            <Route\n              path=\"/park\"\n              render={() => (\n                <Container\n                  images={this.state.parkURLs}\n                  loading={this.state.loading}\n                />\n              )}\n            />\n            <Route\n              path=\"/city\"\n              render={() => (\n                <Container\n                  images={this.state.cityURLs}\n                  loading={this.state.loading}\n                />\n              )}\n            />\n            <Route\n              path=\"/search\"\n              render={() => (\n                <Container\n                  images={this.state.searchImages}\n                  loading={this.state.loading}\n                />\n              )}\n            />\n            <Route component={NotFound} />\n          </Switch>\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}